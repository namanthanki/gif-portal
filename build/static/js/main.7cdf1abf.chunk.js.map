{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","connectWallet","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","userAddress","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"orCAAe,MAA0B,yC,iDCUjCA,EAA2BC,IAA3BD,cAGFE,GAH6BD,IAAZE,QAGXC,OAAOC,OAAOC,EAAGC,SAASC,YAChCC,EAAS,IAAIC,WAAWR,GACxBS,EAAcV,IAAKE,QAAQS,cAAcH,GAGzCI,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAGvCC,EAAUC,wBAAc,UAGxBC,EACiB,YAIjBC,EAAiB,cACjBC,EAAY,8BAA0BD,GA2P7BE,EAzPH,WAEV,IASA,EAA4CC,mBAAS,MAArD,mBAAQC,EAAR,KAAuBC,EAAvB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,CAAC,KAAxC,mBAAOK,EAAP,KAAgBC,EAAhB,KAOMC,EAAwB,iDAAG,gHAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAKvBA,EAAOC,UALgB,wBAMzBC,QAAQC,IAAI,yBANa,SAYFH,EAAOI,QAAQ,CAAEC,eAAe,IAZ9B,OAYnBC,EAZmB,OAazBJ,QAAQC,IACN,6BACAG,EAASC,UAAUC,YAMrBf,EAAiBa,EAASC,UAAUC,YArBX,gCAwB3BC,MAAM,8DAxBqB,0DA2B7BP,QAAQQ,MAAR,MA3B6B,0DAAH,qDA+BxBC,EAAO,iDAAG,mGACY,IAAtBjB,EAAWkB,OADD,uBAEZV,QAAQC,IAAI,sBAFA,iCAMdR,EAAc,IACdO,QAAQC,IAAI,YAAaT,GAPX,SAUNmB,EAAWC,IACXC,EAAU,IAAIC,IAAQlC,EAAKF,EAAWiC,GAXhC,UAaNE,EAAQE,IAAIC,OAAOxB,EAAY,CACnCyB,SAAU,CACRzC,YAAaA,EAAY6B,UACzBa,KAAMP,EAASQ,OAAOd,aAhBd,eAmBZL,QAAQC,IAAI,mCAAoCT,GAnBpC,UAqBN4B,IArBM,0DAuBZpB,QAAQC,IAAI,qBAAZ,MAvBY,0DAAH,qDA2BPoB,EAAa,iDAAG,uGACDxB,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOI,UAJZ,OAIZE,EAJY,OAKlBJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7Df,EAAiBa,EAASC,UAAUC,YANlB,2CAAH,qDAUbgB,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACR/B,EAAc+B,IAGVZ,EAAc,WAClB,IAAMc,EAAa,IAAIC,aAAW5C,EAASE,GAI3C,OAHiB,IAAI2C,IACnBF,EAAY7B,OAAOC,OAAQb,IAsEzB4C,EAAgB,iDAAG,gHAEflB,EAAWC,IACXC,EAAU,IAAIC,IAAQlC,EAAKF,EAAWiC,GAC5CX,QAAQC,IAAI,QAJS,SAKfY,EAAQE,IAAIe,cAAc,CAC9Bb,SAAU,CACRzC,YAAaA,EAAY6B,UACzBa,KAAMP,EAASQ,OAAOd,UACtB0B,cAAelE,EAAcmE,WAE/BC,QAAS,CAACzD,KAXS,cAarBwB,QAAQC,IAAI,wCAAyCzB,EAAY6B,UAAUC,YAbtD,SAcfc,IAde,yDAiBrBpB,QAAQC,IAAI,sCAAZ,MAjBqB,0DAAH,qDAqBhBmB,EAAU,iDAAG,kHAETT,EAAWC,IACXC,EAAU,IAAIC,IAAQlC,EAAKF,EAAWiC,GAH7B,SAIOE,EAAQqB,QAAQ1D,YAAY2D,MAAM3D,EAAY6B,WAJrD,OAIT6B,EAJS,OAMflC,QAAQC,IAAI,kBAAmBiC,GAC/BvC,EAAWuC,EAAQxC,SAPJ,kDAUfM,QAAQC,IAAI,wBAAZ,MACAN,EAAW,MAXI,0DAAH,qDAkChB,OAfAyC,qBAAU,WACR,IAAMC,EAAM,iDAAG,wGACPzC,IADO,2CAAH,qDAIZ,OADAC,OAAOyC,iBAAiB,OAAQD,GACzB,kBAAMxC,OAAO0C,oBAAoB,OAAQF,MAC/C,IAEHD,qBAAU,WACJ9C,IACFU,QAAQC,IAAI,wBACZmB,OAED,CAAC9B,IAGF,qBAAKkD,UAAU,MAAf,SAED,sBAAKA,UAAWlD,EAAgB,mBAAqB,YAArD,UACK,sBAAKkD,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,+CACA,mBAAGA,UAAU,WAAb,2EAIElD,GA7HR,wBACEkD,UAAU,mCACVC,QAASpB,EAFX,+BA+HO/B,IAnHS,OAAZI,EAEA,qBAAK8C,UAAU,sBAAf,SACE,wBAAQA,UAAU,+BAA+BC,QAASZ,EAA1D,kEASF,sBAAKW,UAAU,sBAAf,UAEE,uBACEE,SAAU,SAACnB,GACTA,EAAMoB,iBACNlC,KAHJ,UAME,uBACEmC,KAAK,OACLC,YAAY,kBACZrB,MAAOhC,EACPsD,SAAUxB,IAEZ,wBACEsB,KAAK,SACLJ,UAAU,+BAFZ,uBAQF,qBAAKA,UAAU,WAAf,SAEG9C,EAAQqD,KAAI,SAACC,EAAMC,GAAP,OACX,sBAAKT,UAAU,WAAf,UACE,qBAAKU,IAAKF,EAAKG,UACf,oBAAGX,UAAU,cAAb,UAA6BQ,GAAQA,EAAKI,YAAY9C,WAAtD,SAF6B2C,eAgFrC,sBAAKT,UAAU,mBAAf,UACE,qBAAKa,IAAI,eAAeb,UAAU,eAAeU,IAAKI,IACtD,mBACEd,UAAU,cACVe,KAAMpE,EACNsC,OAAO,SACP+B,IAAI,aAJN,6BAKetE,cC7QzBuE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7cdf1abf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from \"./idl.json\";\nimport kp from './keypair.json';\nimport './App.css';\n\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  const TEST_GIFS = [\n    'https://media.giphy.com/media/d2NfTnGMMBT8ORweXA/giphy.gif',\n    'https://media.giphy.com/media/u4OCfdmLJEkFi/giphy.gif',\n    'https://media.giphy.com/media/Df1Qh8Ed1FKpi/giphy.gif',\n    'https://media.giphy.com/media/sUP52mudix9Zu/giphy.gif'\n\n  ]\n\n  // States\n  const [ walletAddress, setWalletAddress ] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState(['']);\n\n  //Actions\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n  \n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n  \n          /*\n           * The solana object gives us a function that will allow us to connect\n           * directly with the user's wallet!\n           */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  /* \n   * We want to render this only when wallet is connected  \n   */\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          {/* Go ahead and add this input and button to start */}\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input \n              type=\"text\" \n              placeholder=\"Enter gif link!\" \n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button \n              type=\"submit\" \n              className=\"cta-button submit-gif-button\"\n            >\n              Submit\n            </button>\n          </form>\n\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n                <p className='footer-text'>{ item && item.userAddress.toString() } </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Nostalgic Anime GIFs</p>\n          <p className=\"sub-text\">\n            View your childhood favorite and nostalgic Anime GIFs âœ¨\n          </p>\n          {/* Render your connect to wallet button right here, Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}